ggplot(dados, aes(x = especie, y = altura)) +
geom_boxplot()
resultado_anova <- aov(altura ~ especie, data = dados)
summary(resultado_anova)
dados
install.packages("tidyverse")
library(tidyverse)
mgp
cars
cars
mtcars
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)
dim(mpg)
?drv
?mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = cyl, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hyw, colour=class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hyw, colour=class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour=class))
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour=drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, colour=cty))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size=cty))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size=class))
mpg
mpg
View(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=hwy))
?geom_point()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=class), stroke=5)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=class), stroke=2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=displ), stroke=2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=displ <5), stroke=2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=displ), stroke=2)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
?map_data
nz <- map_data("br")
nz
?map_data
nz <- map_data("world")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
nz <- map_data("state")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
nz <- map_data("world2")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
nz
nz <- map_data("world")
nz
nz[1,]
nz[,nz$region=="Brazil"]
nz[,nz$region="Brazil"]
nz[,nz$region=="Aruba"]
nz[,region=="Aruba"]
nz["Aruba"]
nz[nz$region=="Aruba",]
nz[nz$region=="Brazil",]
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
ggplot(br, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
br<-nz[nz$region=="Brazil",]
ggplot(br, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
unique(nz$region)
br<-nz[nz$region=="Spain",]
ggplot(br, aes(long, lat, group = group)) +
geom_polygon(fill = "white", colour = "black") +
coord_quickmap()
2+2
x <- c(10, 15, 13, 16, 18, 12, 17, 20, 14, 11)
y <- c(12, 14, 11, 16, 15, 13, 18, 19, 17, 10)
t.test(x, y, var.equal = TRUE)
library(ggplot2)
library(rnaturalearth)
# Obter os dados geográficos do Brasil
brasil <- ne_countries(country = "Brazil", returnclass = "sf")
# Criar o mapa
ggplot() +
geom_sf(data = brasil)
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil", state = "Minas Gerais", returnclass = "sf")
# Criar o mapa
ggplot() +
geom_sf(data = mg)
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil", state = "Minas Gerais", returnclass = "sf")
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil", state = "Minas Gerais", returnclass = "sf")
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil", state = "Minas Gerais")
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil")
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil")
# Criar o mapa
ggplot() +
geom_sf(data = mg)
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil", state = "Minas Gerais", returnclass = "sf")
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil")
mg
head(mg)
dim(mg)
# Check available states in Brazil
ne_states(country = "Brazil", returnclass = "data.frame")
# Check available states in Brazil
ne_states(country = "Brazil", returnclass = "sf")
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil", state = "Estado de Acre", returnclass = "sf")
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil", state = "Acre", returnclass = "sf")
mg$region
mg$name
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil", state = "Minas Gerais", returnclass = "sf")
mg$region
mg$featurecla
View(mg)
?ne_states
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil", geounit = "Minas Gerais", returnclass = "sf")
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "united kingdon", geounit = "england", returnclass = "sf")
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "united kingdom", geounit = "england", returnclass = "sf")
# Criar o mapa
ggplot() +
geom_sf(data = mg)
# Get a list of all available countries
ne_countries(returnclass = "data.frame")
# Get a list of all available countries
ne_countries(returnclass = "data.frame", returnclass = "sf")
# Get a list of all available countries
ne_countries()
# Get a list of all available countries
aa<-ne_countries()
dim
dim(aa)
View(aa)
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "fiji", returnclass = "sf")
# Criar o mapa
ggplot() +
geom_sf(data = mg)
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "fiji", returnclass = "sf")
# Criar o mapa
ggplot() +
geom_sf(data = mg)
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "brazil", returnclass = "sf")
# Criar o mapa
ggplot() +
geom_sf(data = mg)
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "Brazil", returnclass = "sf")
# Criar o mapa
ggplot() +
geom_sf(data = mg)
aa[aa$name=="brazil",]
aa[aa$name=="united states",]
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "united states", returnclass = "sf")
# Criar o mapa
ggplot() +
geom_sf(data = mg)
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "united states", returnclass = "sf")
# Obter os dados geográficos de Minas Gerais
mg <- ne_states(country = "usa", returnclass = "sf")
# Criar o mapa
ggplot() +
geom_sf(data = mg)
ne_countries(
scale = 110,
type = "countries",
continent = NULL,
country = NULL,
geounit = NULL,
sovereignty = NULL,
returnclass = c("sp", "sf")
)
spdf_world <- ne_countries()
spdf_africa <- ne_countries(continent = "africa")
spdf_france <- ne_countries(country = "france")
# Criar o mapa
ggplot() +
geom_sf(data = spdf_world)
if (require(sp)) {
plot(spdf_world)
plot(spdf_africa)
plot(spdf_france)
}
library(ggplot2)
library(rnaturalearth)
# Obtain geographic data for New York City
ny_city <- ne_states(country = "United States of America", state = "New York", returnclass = "sf") %>%
filter(str_detect(NAME, "New York City"))
# Obtain geographic data for New York City
ny_city <- ne_states(country = "United States of America", state = "New York", returnclass = "sf")
library(ggplot2)
library(maps)
ny_map_data <- map_data("state", region = "new york")
ny_map <- ggplot(ny_map_data, aes(x = long, y = lat, group = group))
ny_map + geom_polygon()
ny_map <- ggplot(ny_map_data, aes(x = long, y = lat, group = group))
ny_map + geom_polygon()
ny_map +
geom_polygon(fill = "lightgray", color = "black") +
xlim(c(-74.5, -73.5)) +
ylim(c(40.5, 42.2)) +
ggtitle("New York State Map") +
theme_void()
library(rnaturalearth)
br_map_data <- ne_countries(country = "brazil", returnclass = "sf")
br_map_data <- ne_countries(country = "brazil", returnclass = "sf")
ggplot() + geom_sf(data = br_map_data)
ggplot() +
geom_sf(data = br_map_data, fill = "lightgray", color = "black") +
xlim(c(-75, -30)) +
ylim(c(-35, 10)) +
ggtitle("Brazil Map") +
theme_void()
?ne_countries
br_map_data <- ne_countries(country = "brazil", returnclass = "sp")
ggplot() + geom_sf(data = br_map_data)
ggplot() + geom_sp(data = br_map_data)
ggplot() + geom_sf(data = br_map_data)
br_map_data <- ne_countries(country = "brazil", returnclass = "sf")
ggplot() + geom_sf(data = br_map_data)
br_map_data <- ne_countries(continent = "africa", returnclass = "sf")
ggplot() + geom_sf(data = br_map_data)
?ne_cities
br_map_data <- brazil_cities <- ne_cities(country = "brazil", returnclass = "sf")
ggplot() + geom_sf(data = br_map_data)
br_map_data <- brazil_cities <- ne_cities(country = "brazil", returnclass = "sf")
br_map_data <- ne_states(geounit = "africa", returnclass = "sf")
?ne_countries
map <- ne_countries(scale = "medium", returnclass = "sf")
map <- ne_countries(scale = "medium", returnclass = "sf")
install.packages("rnaturalearthdata")
map <- ne_countries(scale = "medium", returnclass = "sf")
View(map)
mtcars
mtcars[1,1]
mtcars[1,:]
mtcars[1,]
mtcars[1,]
mtcars
mtcars[,1]
mtcars
mtcars[1,0]
mtcars[1,]
setwd("C:/DataScienceAcademy/GitHub/LearningSavings")
dir()
ms<-read_csv("MegaSenaCSV.csv",col_names = TRUE)
library(readr)
ms<-read_csv("MegaSenaCSV.csv",col_names = TRUE)
count<-1
bola1<-0
for (i in ms$`bola 1`){
bola1[count]<-i
count<-count+1}
count<-1
bola2<-0
for (i in ms$`bola 2`){
bola2[count]<-i
count<-count+1}
count<-1
bola3<-0
for (i in ms$`bola 3`){
bola3[count]<-i
count<-count+1}
count<-1
bola4<-0
for (i in ms$`bola 4`){
bola4[count]<-i
count<-count+1}
count<-1
bola5<-0
for (i in ms$`bola 5`){
bola5[count]<-i
count<-count+1}
count<-1
bola6<-0
for (i in ms$`bola 6`){
bola6[count]<-i
count<-count+1}
bola1
bola2
bola3
bola4
bola5
bola6
#Vetor com todos os números sorteados em todos os concursos
bolaTotal<-c(bola1,bola2,bola3,bola4,bola5,bola6)
moda = function(dados) {
vetor = table(as.vector(dados))
names(vetor)[vetor == max(vetor)]
}
#Valor que mais saiu dentre os 60 números
moda(bolaTotal)
#Soma das ocorrências de todas as bolas independente da ordem e do sorteio.
somaBola<-data.frame()
for (i in 1:60){
somaBola[i,1]<-i
somaBola[i,2]<-length(bolaTotal[bolaTotal==i])
#count2<-count2+1
}
names(somaBola)<- c("Bola","TotalOcorrencias")
somaBola
#Porcentagem de quanto saiu cada bola
somaBola$Porcentagem <- (somaBola$TotalOcorrencias/length(bolaTotal))*100
somaBola
#Dados ordenados de maneira decrescente (das bolas que mais sairam para as que menos sairam)
somaBolaOrdenado <- somaBola[order(somaBola$TotalOcorrencias,decreasing = TRUE),]
somaBolaOrdenado
#Adicionando uma coluna para ajudar a visualizar a ordem de 1 a 60 (das que mais saem para as que menos saem)
somaBolaOrdenado$ordem <- c(1:60)
somaBolaOrdenado
plot(somaBola$Bola,somaBola$TotalOcorrencias)
plot(somaBola$Bola,somaBola$TotalOcorrencias)
hist(bolaTotal,breaks = 15)
numerosdasorte <- somaBolaOrdenado$Bola[somaBolaOrdenado$ordem>=32]
numerosdasorte
#Número de volantes possíveis com os números da sorte é dado pela combinação abaixo
factorial(length(numerosdasorte))/(factorial(6)*factorial(length(numerosdasorte)-6))
#Criando uma nova tabela apenas com os valores das bolas sorteadas divididas por concurso.
ms2<-ms
ms2$Concurso<-NULL
ms2$Data<-NULL
ms2
#Com a função apply, vamos calcular as médias das 6 bolas de cada sorteio (concurso)
apply(ms2,1,mean)
#Criando uma nova linha na tabela ms2 com as médias calculadas
ms2$media<-apply(ms2,1,mean)
ms2
#Ordenando os dados de maneira decrescente pela média
ms2<-ms2[order(ms2$media),]
ms2
#Criando um histograma para entender a média
hist(ms2$media)
#Calculando kurtosis e Skewness
kurtosis(ms2$media)
skewness(ms2$media)
mean(ms2$media)
#O código abaixo seleciona 100 volantes dentre todos que seguem as regras acima.
#Para ter uma margem, colocamos uma faixa de média que vai de 30.5 a 30.52
countv<-0
while (countv < 100){
volante<-sample(numerosdasorte,6)
if (mean(volante)>=30.5 & mean(volante)<=30.52)
{print(sort(volante))
#print(mean(volante))
countv<-countv+1
}
}
ms<-read_csv("MegaSenaCSV.csv",col_names = TRUE)
count<-1
bola1<-0
for (i in ms$`bola 1`){
bola1[count]<-i
count<-count+1}
count<-1
bola2<-0
for (i in ms$`bola 2`){
bola2[count]<-i
count<-count+1}
count<-1
bola3<-0
for (i in ms$`bola 3`){
bola3[count]<-i
count<-count+1}
count<-1
bola4<-0
for (i in ms$`bola 4`){
bola4[count]<-i
count<-count+1}
count<-1
bola5<-0
for (i in ms$`bola 5`){
bola5[count]<-i
count<-count+1}
count<-1
bola6<-0
for (i in ms$`bola 6`){
bola6[count]<-i
count<-count+1}
bola1
bola2
bola3
bola4
bola5
bola6
#Vetor com todos os números sorteados em todos os concursos
bolaTotal<-c(bola1,bola2,bola3,bola4,bola5,bola6)
moda = function(dados) {
vetor = table(as.vector(dados))
names(vetor)[vetor == max(vetor)]
}
#Valor que mais saiu dentre os 60 números
moda(bolaTotal)
#Soma das ocorrências de todas as bolas independente da ordem e do sorteio.
somaBola<-data.frame()
for (i in 1:60){
somaBola[i,1]<-i
somaBola[i,2]<-length(bolaTotal[bolaTotal==i])
#count2<-count2+1
}
names(somaBola)<- c("Bola","TotalOcorrencias")
somaBola
#Porcentagem de quanto saiu cada bola
somaBola$Porcentagem <- (somaBola$TotalOcorrencias/length(bolaTotal))*100
somaBola
#Dados ordenados de maneira decrescente (das bolas que mais sairam para as que menos sairam)
somaBolaOrdenado <- somaBola[order(somaBola$TotalOcorrencias,decreasing = TRUE),]
somaBolaOrdenado
#Adicionando uma coluna para ajudar a visualizar a ordem de 1 a 60 (das que mais saem para as que menos saem)
somaBolaOrdenado$ordem <- c(1:60)
somaBolaOrdenado
plot(somaBola$Bola,somaBola$TotalOcorrencias)
hist(bolaTotal,breaks = 15)
numerosdasorte <- somaBolaOrdenado$Bola[somaBolaOrdenado$ordem>=32]
numerosdasorte
#Número de volantes possíveis com os números da sorte é dado pela combinação abaixo
factorial(length(numerosdasorte))/(factorial(6)*factorial(length(numerosdasorte)-6))
#Criando uma nova tabela apenas com os valores das bolas sorteadas divididas por concurso.
ms2<-ms
ms2$Concurso<-NULL
ms2$Data<-NULL
ms2
#Com a função apply, vamos calcular as médias das 6 bolas de cada sorteio (concurso)
apply(ms2,1,mean)
#Criando uma nova linha na tabela ms2 com as médias calculadas
ms2$media<-apply(ms2,1,mean)
ms2
#Ordenando os dados de maneira decrescente pela média
ms2<-ms2[order(ms2$media),]
ms2
#Criando um histograma para entender a média
hist(ms2$media)
#Calculando kurtosis e Skewness
kurtosis(ms2$media)
skewness(ms2$media)
mean(ms2$media)
numerosdasorte
#O código abaixo seleciona 100 volantes dentre todos que seguem as regras acima.
#Para ter uma margem, colocamos uma faixa de média que vai de 30.5 a 30.52
countv<-0
while (countv < 100){
volante<-sample(numerosdasorte,6)
if (mean(volante)>=30.5 & mean(volante)<=30.52)
{print(sort(volante))
#print(mean(volante))
countv<-countv+1
}
}
#O código abaixo seleciona 100 volantes dentre todos que seguem as regras acima.
#Para ter uma margem, colocamos uma faixa de média que vai de 30.5 a 30.52
countv<-0
while (countv < 100){
volante<-sample(numerosdasorte,6)
if (mean(volante)>=30.5 & mean(volante)<=30.52)
{print(sort(volante))
#print(mean(volante))
countv<-countv+1
}
}
